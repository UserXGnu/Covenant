@inherits OwningComponentBase<IEasyPeasyService>

@using Microsoft.JSInterop
@using EasyPeasy.Core
@using EasyPeasy.Models.Grawls
@using EasyPeasy.Components.Shared
@inject IJSRuntime IJSRuntime

<EasyPeasyTable TItem="GrawlTask" Items="GrawlTasks.ToList()" SearchRow="IsRowDisplayed"
               IsSearchable="IsSearchable" IsSortable="IsSortable" IsPaginated="IsPaginated" PageLength="PageLength" class="table table-hover">
    <TableHeader>
        <SortableTableHeader TItem="GrawlTask" TItem2="string" GetSortableProperty="(task) => task.Name">
            <HeaderContent>Name</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="GrawlTask" TItem2="string" GetSortableProperty="(task) => GetCompatibleDotNetVersions(task)">
            <HeaderContent>CompatibleDotNetVersions</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="GrawlTask" TItem2="string" GetSortableProperty="(task) => GetReferenceSourceLibraries(task)">
            <HeaderContent>ReferenceSourceLibraries</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="GrawlTask" TItem2="string" GetSortableProperty="(task) => task.Description">
            <HeaderContent>Description</HeaderContent>
        </SortableTableHeader>
    </TableHeader>
    <TableRow Context="task">
        <tr>
            <td>
                <a href="/grawltask/edit/@task.Id">
                    @task.Name
                </a>
            </td>
            <td>@GetCompatibleDotNetVersions(task)</td>
            <td>@GetReferenceSourceLibraries(task)</td>
            <td>@task.Description</td>
        </tr>
    </TableRow>
</EasyPeasyTable>

@code {
    [Parameter]
    public IEnumerable<GrawlTask> GrawlTasks { get; set; }

    [Parameter]
    public bool IsSearchable { get; set; } = true;

    [Parameter]
    public bool IsSortable { get; set; } = true;

    [Parameter]
    public bool IsPaginated { get; set; } = true;

    [Parameter]
    public int PageLength { get; set; } = 10;

    protected override async Task OnInitializedAsync()
    {
        this.GrawlTasks = await Service.GetGrawlTasks();
    }

    private string GetCompatibleDotNetVersions(GrawlTask task)
    {
        return string.Join(", ", task.CompatibleDotNetVersions.Select(DN => DN.ToString()));
    }

    private string GetReferenceSourceLibraries(GrawlTask task)
    {
        return string.Join(",", task.ReferenceSourceLibraries.Select(RSL => RSL.Name));
    }

    private bool IsRowDisplayed(GrawlTask task, string SearchTerm)
    {
        return SearchTerm == string.Empty ||
            task.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            task.Description.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            GetCompatibleDotNetVersions(task).Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            GetReferenceSourceLibraries(task).Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase);
    }
}
