@inherits OwningComponentBase<IEasyPeasyService>
@implements IDisposable

@using System.IO
@using System.Linq
@using Microsoft.JSInterop
@using EasyPeasy.Core
@using EasyPeasy.Models.Grawls
@using EasyPeasy.Models.EasyPeasy
@inject INotificationService INotificationService
@inject IJSRuntime IJSRuntime

<div class="card task-card interact-style interact-border w-100" id="tasking-card-@GrawlCommand.Id">
    <div class="d-flex flex-row">
        <div class="col-auto p-0">
            <a class="expand-button p-0" type="button" @onclick="OnToggle">
                @if (this.IsMinimized)
                {
                    <span class="fe fe-plus text-muted font-weight-bold"></span>
                }
                else
                {
                    <span class="fe fe-minus text-muted font-weight-bold"></span>
                }
            </a>
        </div>
        <div class="col-auto pl-0 pr-2">
            @if (GrawlCommand.GrawlTasking == null)
            {
                <p class="terminal-highlight-color task-text-head">[@GrawlCommand.CommandTime UTC] Command submitted</p>
            }
            else
            {
                <p class="terminal-highlight-color task-text-head">[@GrawlCommand.CommandTime UTC] @GrawlCommand.GrawlTasking.GrawlTask.Name @GrawlCommand.GrawlTasking.Status.ToString().ToLower()</p>
            }
            <p class="terminal-text-color task-text-body">(<b>@GrawlCommand.User.UserName</b>) > @GrawlCommand.Command</p>
        </div>
    </div>
    <div class="card-header p-0 border-top-0 border-bottom-0" id="tasking-header-@GrawlCommand.Id"></div>
    @if (!this.IsMinimized)
    {
        <div class="card-body interact-style">
            @if (GrawlCommand.CommandOutput != null)
            {
                if (GrawlCommand.GrawlTasking != null && GrawlCommand.GrawlTasking.GrawlTask != null && GrawlCommand.GrawlTasking.GrawlTask.Name == "ScreenShot")
                {
                    if (GrawlCommand.GrawlTasking.Status == GrawlTaskingStatus.Progressed)
                    {<p class="terminal-text-color task-text-body" style="white-space:pre-wrap">Downloading screenshot... @GrawlCommand.CommandOutput.Output.Length bytes</p>}
                    else if (GrawlCommand.GrawlTasking.Status == GrawlTaskingStatus.Completed)
                    {<img style="max-width: 100%" src="data:image/png;base64, @GrawlCommand.CommandOutput.Output" />}
                }
                else if (GrawlCommand.GrawlTasking != null && GrawlCommand.GrawlTasking.GrawlTask != null && GrawlCommand.GrawlTasking.GrawlTask.Name == "Download")
                {
                    if (GrawlCommand.GrawlTasking.Status == GrawlTaskingStatus.Progressed)
                    {<p class="terminal-text-color task-text-body" style="white-space:pre-wrap">Downloading... @GrawlCommand.CommandOutput.Output.Length bytes</p>}
                    else if (GrawlCommand.GrawlTasking.Status == GrawlTaskingStatus.Completed)
                    {DownloadEvent downloadEvent = GetDownloadEvent(GrawlCommand).WaitResult();<p class="text-white task-text-body" style="white-space:pre-wrap">Download completed: @if (downloadEvent != null){<button type="button" class="btn btn-link text-white task-text-body" @onclick="(e => OnDownload(downloadEvent))">@downloadEvent.FileName</button>}</p>}
                }
                else
                {
                    <p class="terminal-text-color task-text-body" style="white-space:pre-wrap">@GrawlCommand.CommandOutput.Output</p>
                }
            }
            else
            {
                <p class="terminal-text-color task-text-body" style="white-space:pre-wrap"></p>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public int GrawlCommandId { get; set; }
    private GrawlCommand GrawlCommand { get; set; }

    [Parameter]
    public bool IsMinimized { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        this.GrawlCommand = await Service.GetGrawlCommand(this.GrawlCommandId);
        this.GrawlCommand.CommandOutput ??= await Service.GetCommandOutput(this.GrawlCommand.CommandOutputId);
        Service.DisposeContext();
        this.INotificationService.OnEditGrawlCommand += OnEditGrawlCommand;
        this.INotificationService.OnEditCommandOutput += OnEditCommandOutput;
        this.INotificationService.OnEditGrawlTasking += OnEditGrawlTasking;
    }

    public void Dispose()
    {
        this.INotificationService.OnEditGrawlCommand -= OnEditGrawlCommand;
        this.INotificationService.OnEditCommandOutput -= OnEditCommandOutput;
        this.INotificationService.OnEditGrawlTasking -= OnEditGrawlTasking;
    }

    private async void OnEditCommandOutput(object sender, CommandOutput commandOutput)
    {
        if (this.GrawlCommand.CommandOutput != null && this.GrawlCommand.CommandOutput.Id == commandOutput.Id)
        {
            this.GrawlCommand = await Service.GetGrawlCommand(this.GrawlCommandId);
            Service.DisposeContext();
            this.GrawlCommand.CommandOutput ??= await Service.GetCommandOutput(this.GrawlCommand.CommandOutputId);
            Service.DisposeContext();
            await this.InvokeAsync(() => this.StateHasChanged());
        }
    }

    private async void OnEditGrawlCommand(object sender, GrawlCommand grawlCommand)
    {
        if (this.GrawlCommandId == grawlCommand.Id)
        {
            this.GrawlCommand = await Service.GetGrawlCommand(this.GrawlCommandId);
            Service.DisposeContext();
            this.GrawlCommand.CommandOutput ??= await Service.GetCommandOutput(this.GrawlCommand.CommandOutputId);
            Service.DisposeContext();
            await this.InvokeAsync(() => this.StateHasChanged());
        }
    }

    private async void OnEditGrawlTasking(object sender, GrawlTasking grawlTasking)
    {
        if (this.GrawlCommand.GrawlTasking != null && this.GrawlCommand.GrawlTasking.Id == grawlTasking.Id)
        {
            this.GrawlCommand = await Service.GetGrawlCommand(this.GrawlCommandId);
            this.GrawlCommand.CommandOutput ??= await Service.GetCommandOutput(this.GrawlCommand.CommandOutputId);
            Service.DisposeContext();
            await this.InvokeAsync(() => this.StateHasChanged());
        }
    }

    private async Task OnToggle()
    {
        if (this.IsMinimized && this.GrawlCommand.CommandOutput == null)
        {
            this.GrawlCommand = await Service.GetGrawlCommand(this.GrawlCommand.Id);
            Service.DisposeContext();
        }
        this.IsMinimized = !IsMinimized;
    }

    private async Task<DownloadEvent> GetDownloadEvent(GrawlCommand command)
    {
        if (GrawlCommand.GrawlTasking != null && GrawlCommand.CommandOutput != null)
        {
            IEnumerable<DownloadEvent> downloadEvents = await Service.GetDownloadEvents();
            Service.DisposeContext();
            return downloadEvents
            .FirstOrDefault(DE => DE.Time == command.GrawlTasking.CompletionTime && DE.FileContents == command.CommandOutput.Output);
        }
        return null;
    }

    private async Task OnDownload(DownloadEvent downloadEvent)
    {
        if (!Common.ContentTypeMappings.TryGetValue(Path.GetExtension(downloadEvent.FileName), out string contentType))
        {
            contentType = Common.DefaultContentTypeMapping;
        }
        await IJSRuntime.InvokeAsync<string>(
            "DownloadFile",
            Path.GetFileName(downloadEvent.FileName),
            contentType,
            downloadEvent.FileContents
        );
    }
}
