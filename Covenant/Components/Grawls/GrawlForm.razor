@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms
@using EasyPeasy.Models.Grawls
@inject IJSRuntime IJSRuntime

<EditForm Model="Grawl" OnValidSubmit="OnFormSubmit">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="Status">Status</label>
            <select id="Status" name="Status" class="form-control" disabled>
                <option selected value="@Grawl.Status">@Grawl.Status.ToString()</option>
            </select>
        </div>
        <div class="form-group col-md-4">
            <label for="Children">Children</label><br />
            <select id="Children" name="Children" class="selectpicker show-menu-arrow" multiple data-dropup-auto="false" data-selected-text-format="count > 4" disabled>
                @foreach (string g in Grawl.Children)
                {
                    <option selected value="@g">@g</option>
                }
            </select>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="ImplantTemplate.CommType">CommType</label>
            <select id="ImplantTemplate.CommType" name="ImplantTemplate.CommType" class="form-control" disabled>
                <option selected value="@Grawl.ImplantTemplate.CommType">@Grawl.ImplantTemplate.CommType.ToString()</option>
            </select>
        </div>
        @if (this.Grawl.ImplantTemplate.CommType == CommunicationType.HTTP)
        {
            <div class="form-group col-md-4">
                <label for="ValCerT">ValCerT</label>
                <select id="ValCerT" name="ValCerT" class="form-control" disabled>
                    @if (this.Grawl.ValCerT)
                    {
                        <option selected>True</option>
                        <option>False</option>
                    }
                    else
                    {
                        <option>True</option>
                        <option selected>False</option>
                    }
                </select>
            </div>
            <div class="form-group col-md-4">
                <label for="UsCertPin">UsCertPin</label>
                <select id="UsCertPin" name="UsCertPin" class="form-control" disabled>
                    @if (this.Grawl.UsCertPin)
                    {
                        <option selected>True</option>
                        <option>False</option>
                    }
                    else
                    {
                        <option>True</option>
                        <option selected>False</option>
                    }
                </select>
            </div>
        }
        @if (this.Grawl.ImplantTemplate.CommType == CommunicationType.SMB)
        {
            <div class="form-group col-md-4">
                <label for="SMBPipeName">SMBPipeName</label>
                <input id="SMBPipeName" name="SMBPipeName" value="@Grawl.SMBPipeName" class="form-control" readonly>
            </div>
        }
    </div>
    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="DotNetVersion">DotNetVersion</label>
            <select id="DotNetVersion" name="DotNetVersion" class="form-control" disabled>
                <option selected value="@Grawl.DotNetVersion">@Grawl.DotNetVersion</option>
            </select>
        </div>
        <div class="form-group col-md-4">
            <label for="Integrity">Integrity</label>
            <select id="Integrity" name="Integrity" class="form-control" disabled>
                <option selected value="@Grawl.Integrity">@Grawl.Integrity</option>
            </select>
        </div>
        <div class="form-group col-md-4">
            <label for="Process">Process</label>
            <input id="Process" name="Process" value="@Grawl.Process" class="form-control" readonly>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="UserDomainName">UserDomainName</label>
            <input id="UserDomainName" name="UserDomainName" value="@Grawl.UserDomainName" class="form-control" readonly>
        </div>
        <div class="form-group col-md-6">
            <label for="UserName">UserName</label>
            <input id="UserName" name="UserName" value="@Grawl.UserName" class="form-control" readonly>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="IPAddress">IPAddress</label>
            <input id="IPAddress" name="IPAddress" value="@Grawl.IPAddress" class="form-control" readonly>
        </div>
        <div class="form-group col-md-4">
            <label for="Hostname">Hostname</label>
            <input id="Hostname" name="Hostname" value="@Grawl.Hostname" class="form-control" readonly>
        </div>
        <div class="form-group col-md-4">
            <label for="OperatingSystem"></label>
            <input id="OperatingSystem" name="OperatingSystem" value="@Grawl.OperatingSystem" class="form-control" readonly>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="ActivationTime">ActivationTime</label>
            <input id="ActivationTime" name="ActivationTime" value="@Grawl.ActivationTime" class="form-control" readonly>
        </div>
        <div class="form-group col-md-6">
            <label for="LastCheckIn">LastCheckIn</label>
            <input id="LastCheckIn" name="LastCheckIn" value="@Grawl.LastCheckIn" class="form-control" readonly>
        </div>
    </div>
    <hr />
    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="Name">Name</label>
            <input id="Name" name="Name" @bind="Grawl.Name" class="form-control">
            <div class="text-danger"><ValidationMessage For="() => Grawl.Name" /></div>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-8">
            <label for="Note">Note</label>
            <input id="Note" name="Note" @bind="Grawl.Note" class="form-control">
            <div class="text-danger"><ValidationMessage For="() => Grawl.Note" /></div>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="Delay">Delay</label>
            <input id="Delay" name="Delay" @bind="Grawl.Delay" class="form-control">
            <div class="text-danger"><ValidationMessage For="() => Grawl.Delay" /></div>
        </div>
        <div class="form-group col-md-4">
            <label for="JItterPercent">JItterPercent</label>
            <select id="JItterPercent" name="JItterPercent" @bind="Grawl.JItterPercent" class="form-control">
                @for (int i = 0; i < 100; i++)
                {
                    @if (this.Grawl.JItterPercent == i)
                    {
                        <option selected value="@i">@i</option>
                    }
                    else
                    {
                        <option value="@i">@i</option>
                    }
                }
            </select>
            <div class="text-danger"><ValidationMessage For="() => Grawl.JItterPercent" /></div>
        </div>
        <div class="form-group col-md-4">
            <label for="ConneCTAttEmpts">ConneCTAttEmpts</label>
            <input id="ConneCTAttEmpts" name="ConneCTAttEmpts" @bind="Grawl.ConneCTAttEmpts" class="form-control">
            <div class="text-danger"><ValidationMessage For="() => Grawl.ConneCTAttEmpts" /></div>
        </div>
    </div>
    <div class="form-group">
        <label for="KillDate">KillDate</label>
        <input id="KillDate" name="KillDate" @bind="Grawl.KillDate" class="form-control">
        <div class="text-danger"><ValidationMessage For="() => Grawl.KillDate" /></div>
    </div>
    <div class="btn-group" role="group">
        <button type="submit" class="btn btn-primary">
            <span class="fe fe-edit"></span> Edit
        </button>
        @if (this.Grawl.Status == GrawlStatus.Hidden)
        {
            <button type="button" @onclick="OnUnhide" class="btn btn-success ml-2">
                <span class="fe fe-eye"></span> Unhide
            </button>
        }
        else
        {
            <button type="button" @onclick="OnHide" class="btn btn-warning ml-2">
                <span class="fe fe-eye-off"></span> Hide
            </button>
        }
    </div>
</EditForm>

@code {
    [Parameter]
    public Grawl Grawl { get; set; }

    [Parameter]
    public EventCallback<Grawl> OnSubmit { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await IJSRuntime.InvokeAsync<string>("InitializeDateTimePicker", "#KillDate");
    }

    private async Task OnHide()
    {
        this.Grawl.Status = GrawlStatus.Hidden;
        await this.OnSubmit.InvokeAsync(this.Grawl);
    }

    private async Task OnUnhide()
    {
        if (this.Grawl.Status == GrawlStatus.Hidden)
        {
            this.Grawl.Status = GrawlStatus.Active;
        }
        await this.OnSubmit.InvokeAsync(this.Grawl);
    }

    private async Task OnFormSubmit()
    {
        await this.OnSubmit.InvokeAsync(this.Grawl);
    }

}
