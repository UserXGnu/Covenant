@inherits OwningComponentBase<IEasyPeasyService>
@implements IDisposable

@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Authorization

@using EasyPeasy.Core
@using EasyPeasy.Models.EasyPeasy
@using EasyPeasy.Models.Grawls
@inject IJSRuntime IJSRuntime
@inject INotificationService INotificationService

@if (this.TerminalGrawls.Any())
{
    <ul id="terminals-tab" class="nav nav-tabs mb-3" style="margin-top: 6rem;" role="tablist">
        @for (int i = 0; i < TerminalGrawls.Count(); i++)
        {
            int number = i;
            <li class="nav-item">
                <a class="nav-link d-flex flex-row justify-content-start pr-0" id="terminal-tab-@number" data-toggle="tab" href="#terminal-@number" role="tab" aria-controls="terminal-@number" aria-selected="false">
                    <span class="fe fe-terminal"></span>
                    <span class="ml-1 mr-2">@TerminalGrawls[number].Name</span>
                    <div class="text-muted text-decoration-none mr-2" style="margin-top: -0.1rem;" @onclick="e => OnRemoveTerminal.InvokeAsync(number)">
                        <span class="fe fe-x" style="font-size: 0.88rem;"></span>
                    </div>
                </a>
            </li>
        }
    </ul>

    <div class="tab-content" id="terminal-tab-content">
        @for (int i = 0; i < TerminalGrawls.Count(); i++)
        {
            int number = i;
            <div class="tab-pane fade mb-5" id="terminal-@number" role="tabpanel" aria-labelledby="terminal-tab-@number">
                @if (!string.IsNullOrWhiteSpace(this.TerminalGrawls[number].Note))
                {
                    <p><b>Note</b>: @this.TerminalGrawls[number].Note</p>
                }
                <GrawlInteractTerminal Grawl="TerminalGrawls[number]" OnInteract="OnInteract" />
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public List<Grawl> TerminalGrawls { get; set; } = new List<Grawl>();

    [Parameter]
    public EventCallback<List<Grawl>> TerminalGrawlsChanged { get; set; }

    [Parameter]
    public EventCallback<int> OnRemoveTerminal { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    private EasyPeasyUser CurrentUser { get; set; }
    private string ShowTab { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        this.CurrentUser = await Service.GetCurrentUser((await this.AuthenticationState).User);
        this.INotificationService.OnEditGrawl += OnEditGrawl;
        Service.DisposeContext();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (this.ShowTab != string.Empty)
        {
            await IJSRuntime.InvokeAsync<string>("ShowTab", ShowTab);
            this.ShowTab = string.Empty;
        }
    }

    public void Dispose()
    {
        this.INotificationService.OnEditGrawl -= OnEditGrawl;
    }

    private void OnEditGrawl(object sender, Grawl grawl)
    {
        if (this.TerminalGrawls.Any(G => G.Id == grawl.Id))
        {
            this.TerminalGrawls[this.TerminalGrawls.FindIndex(G => G.Id == grawl.Id)] = grawl;
            this.InvokeAsync(() => this.StateHasChanged());
        }
    }

    public void OnSelectTerminal(Grawl grawl)
    {
        int index = this.TerminalGrawls.FindIndex(G => G.Id == grawl.Id);
        if (index == -1)
        {
            this.TerminalGrawls.Add(grawl);
            index = this.TerminalGrawls.Count() - 1;
        }
        this.ShowTab = $"#terminal-tab-{index}";
        this.TerminalGrawlsChanged.InvokeAsync(this.TerminalGrawls);
        this.StateHasChanged();
    }

    private async Task OnInteract(Tuple<Grawl, string> tuple)
    {
        GrawlCommand command = await Service.InteractGrawl(tuple.Item1.Id, this.CurrentUser.Id, tuple.Item2);
        Service.DisposeContext();
        this.StateHasChanged();
    }
}